[{"content":"Test\n","permalink":"https://ygrenzinger.github.io/posts/remote-work/","summary":"Test","title":"Remote work forced or choosen"},{"content":"Uncle Bob, the well known author of Clean Code, is coming back to us with a new book called Clean Architecture which wants to take a larger view on how to create software.\nEven if Clean Code is one of the major book around OOP and code design (mainly by presenting the SOLID principles), I was not totally impressed by the book.\nClean Architecture leaves me with the same feeling, even if it\u0026rsquo;s pushing the development world to do better, has some good stories and present robust principles to build software.\nThe book is build around 34 chapters organised in chapters.\nProgramming paradigm After some introduction, there is an overview of three paradigm of programming:\n structured programming which imposes discipline on direct transfer of control object oriented programming which imposes discipline on indirect transfer of control functional programming which imposes discipline upon assignment  Uncle Bob tells us that each of these paradigm remove something from us (goto statement, function pointers and assignment) and especially tells us what not to do, not what to do. For OOP, he insists on polymorphism which brings us to dependancy inversion. DI allows the source code dependancy (the inheritance relationship) to points in the invert direction compared to the flow of control. Design Principles This chapter present us the SOLID principles, yes the ones from Clean Code. The most important one is the dependancy inversion principle which is the pillar of the clean architecture. It will become the Dependancy Rule. The second one is Single Responsibility Principle which will become the Common Closure Principle at architectural level. Interesting thing about SRP, Uncle Bob redefines it as : \u0026ldquo;A module should be responsible to one, and only one, actor\u0026rdquo;.\nComponent Principles We start to gain height. The book begins to talk about component which are the units of deployment like jar files, DLLs or even services and introduce three new principles for component cohesion :\n the Reuse / Release Equivalence Principle (RRP) : the granularity of reuse is the granularity of release the Common Closure Principle (CCP) : gather into components those classes that change for the same reasons and at the same times (related to SRP) the Common Reuse Principle (CRP) : don\u0026rsquo;t force users of a component to depend on things they don\u0026rsquo;t need (related to ISP) We see that these higher principles are very similar to the SOLID ones. Finally if you understand well the SOLID principles, there are nothing really new.  However there is a very interesting thing called the tension diagram, a triangle formed by these 3 principles.. This diagram shows that these three principles interact with each other and the difficulty is to place your component inside this triangle. The REP and CCP are inclusive principles : both tend to make component larger. The CRP is an exclusive principle, driving components to be smaller. Uncle Bob advises us to focus on CCP than REP on early stage of development because develop-ability is more important than reuse.\nThe next three principles deal with the coupling between components:\n the Acyclic Dependancies Principles. As soon as you begin using component, you should allow no cycles in the dependancy graph. It\u0026rsquo;s always possible to break a cycle with Dependancy Inversion Principles. Important note : the component structure cannot be designed from the top down, it evolves as the system grows. Component dependancy diagrams are a map to the build-ability and maintainability of the application. the Stable Dependencies Principle. Some components are designed to be volatile. We expect them to change. Any of these should not depend on a component that is difficult to change. We should depend in the direction of stability. Again employing the DIP can help us to apply this principle breaking dependency on a stable component. the Stable Abstractions Principle. A component should be as abstract as it is stable. The software should encapsulates the high level policies (business rules) of the system into stable component. Those policies will become difficult to change. So how to make them flexible enough to withstand change ? By using Open Closed Principle and Abstract classes (personal note : I am not convinced by this advice of abstract classes \u0026hellip;). So the SDP says that dependencies should run in the direction of stability and the SAP says that stability implies abstraction. So dependencies should run in the direction of abstraction.  Some links:\n Summary of all these principles Slides : Principles of Package Design Slides : OOD Principles and Patterns  Architecture Uncle Bob views on architecture is somewhat different of the typical architect. For him, an architect continues to be a programmer. They may not write as much code but they continue to engage in programming tasks. They do this because they cannot do their jobs if they are not experiencing the problems that they are creating for the rest of the programmer.\nThe architecture of a software system is the shape given it by those who build it. The purpose of that shape is to facilitate development, deployment, operation and maintenance. The main strategy is to leave as many options as possible, for as long as possible. We should carefully separate policy from the details at the point that policy has no knowledge of the details. In more pragmatic words, the business rules should not depend on the technical details of implementation.\nThis leads us to draw boundary lines between components. Some of the components are core business rules, other are plugins that contains technical implementations. The DIP and SAP principles arrange dependency to point from lower-level details to higher-level abstractions (toward the core business).\nThe architecture chapters leads us to the Clean Architecture which is clearly the main advice of the book. Clean Architecture push us to separate stable business rules (higher-level abstractions) from volatile technical details (lower-level details), defining clear boundaries. The main building block is the Dependency Rule : source code dependencies must point only inward, toward higher-level policies.\nIt should have the following characteristics:\n Testable Independent of frameworks Independent of the UI Independent of the database Independent of any external agency  This proposal is in fact build on the same ideas than Hexagonal Architecture which proposed by Alistair Cockburn in 2005 and is more and more well known. Maybe because I am accustomed to it, Hexagonal Architecture proposition is more lean and straight to the point for me.\nSome links to discover Hexagonal Architecture\n http://fideloper.com/hexagonal-architecture http://tpierrain.blogspot.fr/2016/04/hexagonal-layers.html Videos of meetup around hexgonal architecture in Paris  Interesting note from Uncle Bob, implementing many boundaries could be costly to implement (with all their abstractions and dependency inversions). So it\u0026rsquo;s a real design decision. You don\u0026rsquo;t simply decide at the start which boundaries to implement and which to ignore. It takes a watchful eye to monitor the system and introduce needed boundaries.\nDetails In the last part and associated chapters, Uncle bob talks about technical details like Database, the Web or Frameworks and insists their are only details on which decisions should be delayed as far as possible.\nThere is also a case study and a chapter by Simon Brown which compare different code organisation : package by layer, feature or component. Most ideas can be found in this article of Simon Brown.\nConclusion I am a bit disappointed by Clean architecture. Of course, it presents must known principles (SOLID) and build from them to present the \u0026ldquo;component\u0026rdquo; principles for software architecture (CCP, RRP, CRP, ADP, SAP, SDP). it also push strong opinions which I totally agree (like Software Architects should keep coding) and a Clean Architecture software structure which is very good structure. However why not keep the hexagonal architecture proposal and propose improvements if necessary ?\nMy main feeling is that the book could easily summarised in a hundred of pages (the book is more than 350 pages). I think it could be made clearer and more straightforward. The design of the book leaves also an \u0026ldquo;old school\u0026rdquo; impression (what are these horrible chapter images ?). It also comes from the many old stories that want to bring some historical context on the subjet (but it could interest some people and brings some \u0026ldquo;old wisdom\u0026rdquo;).\n","permalink":"https://ygrenzinger.github.io/posts/clean-architecture-summary/","summary":"Uncle Bob, the well known author of Clean Code, is coming back to us with a new book called Clean Architecture which wants to take a larger view on how to create software.\nEven if Clean Code is one of the major book around OOP and code design (mainly by presenting the SOLID principles), I was not totally impressed by the book.\nClean Architecture leaves me with the same feeling, even if it\u0026rsquo;s pushing the development world to do better, has some good stories and present robust principles to build software.","title":"Summary of 'Clean Architecture' by Robert C. Martin"},{"content":"\u0026ldquo;Words are windows\u0026rdquo; is an introduction to non violent communication (abbreviated as NVC). Marshall Rosenberg presents in this book the process that allows us to communicate more serenely with others as well as with ourselves. This mode of communication allows us to become more and more caring, authentic, and empathic with others. It can therefore be used in all interactions of everyday life: as a couple, with our children, at work \u0026hellip; NVC is proving to be a very effective way to manage conflicts, and also to better identify our own needs.\nAt the source of Non Violent Communication, NVC has 4 four key components:\n Observation – specific facts/data, no evaluation/judgment Feeling – state how we feel (many failure modes here) Need – the need underlying this feeling Request – must be specific action to address need  First we observe what is really happening in a given situation. These observations must be stated without judgment. Then we take into account the feelings that are awaken by this situation. Then, we look at what are the needs that are related to these feelings. And finally, we look at what we could concretely ask for to satisfy these needs.\n“When \u0026hellip;, I feel \u0026hellip;, because I am needing \u0026hellip;. Therefore, I would now like \u0026hellip;.”\nWhen Communication Hurts Benevolence The author indicates that over time, we have 4 types of alienating language , which are obstacles to benevolence:\n Moralizing judgments : making moralistic judgments about people whose actions do not correspond to our values. Example: \u0026ldquo;he is lazy\u0026rdquo;. Our judgement of others is the expression of our own needs and feelings Making comparisons: comparing oneself to others is a form of judgment, and can hinder benevolence towards oneself and others. Refusing our responsibilities: this prevents the individual from becoming fully aware that he is responsible for his thoughts, feelings and actions. The expression \u0026ldquo;must\u0026rdquo;, used very often is a good example. Finally, communicating our desires in the form of demands. The recipient will feel the threat of punishment or reproach if he does not respond favorably to the request. Children can be a good example of why it doesn’t work as expected.  Observing Without Evaluating The first step of NVC is to distinguish between observation and evaluation. If we mix the two, our interlocutor risks hearing a criticism and resist what we are saying.\n An evaluation would be \u0026ldquo;John is really not a punctual person\u0026rdquo; An observation is \u0026ldquo;John arrived twice late this week\u0026rdquo;  Other example of evaluation words: Always, never, ever, whenever, frequently, seldom…\nIdentify and express our feelings Identify and express our feelings is the second step in the process. Express our vulnerability can help to solve conflicts. Unfortunately, many of us have learned to work with our head rather than our heart. We must relearn the language of the heart. We must distinguish between what we feel and we think we are. The author insists on the importance of differentiating feelings from mental interpretations. The words \u0026ldquo;feel\u0026rdquo; and \u0026ldquo;feeling\u0026rdquo; are often used, not to express a feeling but rather a thought, judgements or interpretations.\nFor example \u0026ldquo;I feel like a failure\u0026rdquo; or \u0026ldquo;I feel it\u0026rsquo;s useless\u0026rdquo; are mental interpretations. While \u0026ldquo;I feel sad\u0026rdquo; or \u0026ldquo;I am impatient to start\u0026rdquo; express feelings.\nIt could be necessary to develop a vocabulary of feelings so that we can express our feelings and emotions clearly. This will make it easier to establish a sincere connection with others.\nTaking responsibility for our feelings Taking responsibility for our feelings and discovering the needs that are behind them is the third step of Non Violent Communication. The acts of others may be the trigger but never the cause of our feelings. Faced with a negative message, the author identifies 4 ways to react:\n to feel guilty blame the other perceive our feelings and needs seek to perceive the feelings and needs of the other  Let\u0026rsquo;s look at the different cases and their consequences: Marie says to her husband Douglas \u0026ldquo;You forgot to buy me some butter, that I asked you last night!\u0026rdquo; Here are the 4 ways Jean could answer:\n \u0026ldquo;yes you\u0026rsquo;re right, I\u0026rsquo;m really distracted\u0026rdquo; He feels guilty. The associated feelings will be of worthlessness, guilt and depression. \u0026ldquo;You only had to remind me this morning or send me a message to make me think!\u0026rdquo; He blames his wife. This increases the feeling of anger. \u0026ldquo;When you express yourself that way, I do not feel respected, because I need you to accept that I can forget.\u0026rdquo; Here, he becomes aware of his feeling and expresses the associated need. \u0026ldquo;Do you feel angry because you have the impression that I did not listen to you and that you need consideration?\u0026rdquo; Jean takes into account the feeling of his wife and tries to express the associated need.  The last two ways are good ways to use Non Violent Communication and allow a sincere exchange based on mutual understanding. Expressing your needs and feelings in this way is not easy, especially in today\u0026rsquo;s society, where being modest is de rigueur. Only it is the most effective way to communicate serenely, in a true exchange and respectful of the other.\nJudgments of others are alienated expressions of our own unmet needs. For example :\n Autonomy: to choose one’s goals, values, plans Celebration: creation of life and goals fulfilled, celebrate loss through mourning Integrity: authenticity, creativity, self-worth Interdependence: acceptance, appreciation, community, enriching life, safety, empathy, honesty, love, respect, support, trust, understanding Play: fun, laughter Spiritual Communion: peace, harmony, beauty Physical Nurturance: food, exercise, rest, sex, shelter, touch, protection  If we do not give values to our needs, others will not give them any consideration. By learning to take responsibility for our feelings, we usually go through 3 phases:\n Affective slavery where we believe we are responsible for the feelings of others (keep everyone happy) the execrable phase where we refuse to admit that the feelings and needs of others matter to us Affective liberation in which we fully assume our own feelings and respond to the needs of others out of compassion  Ask what would contribute to our well-being Formulating a request is the 4th and final step in the process. The author recommends that we respect a few criteria:\n Request what we want, not what we don’t want. First of all, he advises to use a positive action language, because negative requests can cause confusion and resistance. Make a clear request. For the application to be clear, it must be formulated in a sincere, concise and precise manner. The more we make a precise request, the more likely we are to get it. Vague language also results in internal confusion. Ask the listener to reflect it back in their own words. In order to avoid misunderstandings, we sometimes have to make sure that the request has been understood (by reformulating for example). We should express appreciation (for example “I’m grateful to you for telling me what you heard.”) and empathize with the listener who doesn’t want to reflect back. Request, not requirement. Finally, it\u0026rsquo;s very important that the interlocutor does not feel the demand as a requirement. Requests are received as demands when they think they will be blamed/punished for non-compliance. For an application to be a request and not a requirement, our interlocutors must be able to answer negatively without fear of reproach. We should not engage in persuasion until we have empathized with what prevented that person’s acceptance.  Receiving with empathy To listen with empathy, we must not listen with our head, but with our whole being. We must \u0026ldquo;forget about\u0026rdquo; to listen to each other. But we tend to give advice, to comfort or give our opinion, while the person just wants to be heard. Empathy is emptying the mind and listening with our entire self, which only occurs when we have shed preconceived notions and judgments.\nTo listen with empathy, we should:\n Reflect back to others what we heard. This reveals our understanding, while eliciting necessary corrections. Hearing a paraphrase will be more reassuring than simply saying you understand. Allow others to fully express themselves before turning to requests or solutions. We should offers them some time to reflect on their own words. Don’t ask for information without first sensing the speaker’s reality (e.g. “Why are you feeling that way?”). We should persist in empathy until the speaker has exhausted all of their feelings, marked by a release of tension in the body, or the speaker stops talking. We recognize the release of tension in their body by feeling a corresponding release in our own. Interrupt with empathy, they might be needing it without realizing. We should openly express our desire to be more connected and request information. Lifeless conversations for the listener are equally so for the speaker. It is more considerate to interrupt than to pretend to listen. Listen to ourselves. When we have trouble empathizing with others, it is a sign we require empathy ourselves. We can (and must) give ourselves the same quality of listening and thus better identify our own needs before dealing with those of others.  At last it may be difficult to empathize with those who are closest to us.\nThe Power of Empathy Developing our ability to empathize gives us access to new resources. According to the author, using empathy allows us to remain both sincere and vulnerable, which creates a real link with the other person. This sometimes helps to heal suffering by breaking down certain psychological barriers. Empathy alone can defuse a danger, and a risk of violence. It allows us to accept a rejection without seeing a rejection, to revive a conversation and even sometimes to understand what is not said in words.\nLet us relate to ourselves with kindness It is surely in our relationship with ourselves that the NVC plays its most important role. It\u0026rsquo;s difficult to be benevolent with others if one is violent and self-righteous towards oneself. When we catch ourselves being reproached, the author advises us to stop and ask ourselves: \u0026ldquo;What is the unfulfilled need expressed through this moral judgment?\u0026rdquo;. This corresponds to mourning in CNV: we relate to unmet needs and associated feelings. We evaluate how the behavior we regret went against our need, and we welcome the feeling that emerges from this awareness. Following this mourning, we forgive ourselves by giving empathy to the part of ourselves that has acted in the past. To forgive ourselves, we identify the need that has led to our behavior in the past, and we create this empathic, nonjudgmental link.\nThe author also insists that our actions should be animated by a desire for life rather than by fear, shame or obligation. He gives as an example all the sentences that we start with \u0026ldquo;I must,\u0026rdquo; \u0026ldquo;must\u0026rdquo;. He proposes us is to translate the \u0026ldquo;I must\u0026rdquo; into \u0026ldquo;I choose\u0026rdquo;. In this way, we become fully responsible for our actions. He goes even further and proposes to take back all that \u0026ldquo;we must do\u0026rdquo;, all that we are obliged to do without joy and to make sentences with the formula: \u0026ldquo;I choose to \u0026hellip; because I want \u0026hellip;.\u0026rdquo;\nIn this way, we realize what motivates our actions. We are becoming more in tune with our needs, allowing us to better understand our values ​​and be more honest with ourselves.\nExpressing anger fully Hearing about \u0026ldquo;non-violent\u0026rdquo; communication, one would think that anger has no place in this process. This is incorrect. The author encourages us to fully express our anger. The first step to fully express anger is to take full responsibility. The target of our anger may be a trigger but is not responsible for our emotions. We must pay full attention to our feelings and needs. The author emphasizes that we are much more likely to achieve what we want by expressing our needs than by judging, criticizing or punishing the other.\nThe author counts 4 steps necessary to the healthy expression of anger:\n Take a break, and breathe deeply Identify the judgments that come to mind Become aware of our needs Express our unfulfilled feelings and needs  To learn and apply the CNV process correctly, the key is to take your time. We must break with our conditionings. Judging and criticizing is really anchored in our habits. According to the author, learning this process is long, as is its implementation.\nThe Use of Force for Protection Purposes Very rarely, it is nevertheless impossible to communicate, in the case of an imminent danger for example. The use of force may be unavoidable and should be used for protection.\nHowever, according to the author, the repressive use of force and punishment is not effective. The use of force generates resistance to the behavior we seeks to arouse. As for the punishment, it diminishes the sincerity of the reports and directs attention to what will happen if one acts badly, and not on the act itself. For example, an employee who is afraid of sanctions will do his job, but with no desire or enthusiasm. In the long run, he will be less productive and relations with his employer will not be healthy \u0026hellip;\nExpressing gratitude According to the author, compliments often take the form of judgments, even if they are positive. They are sometimes even used to influence the behavior of others. In CNV, expressing gratitude is divided into 3 stages:\n the specific actions which contributed to our well-being the needs of ours that have been fulfilled the pleasurable feelings engendered by fulfillment of those needs  We should also receive appreciation with the same empathy we give other messages. Sadly we tend to search for improvements instead of celebrating how well things are going or we are often uncomfortable receiving praise. We should not receive a compliment with superiority or false humility. When we listen to the effect we have had on others, we can realize the joyous reality that we can make each other’s lives better. We should cultivate an awareness of what others are doing that enriches our lives, and tell them!\nConclusion Reading this book was like a slap in the face. It is like discovering a mirror of our own mistakes when communicating with others or ourselves. Marshall Rosenberg presents in his book a great sum of knowledge, method and example of how we communicate and how to improve this communication. He strongly believes in his radical way of communicating with other which offers a vision so benevolent that it could be considered as unattainable or even alien. And clearly applying the principles and methods of the book will be very difficult for anybody. I don\u0026rsquo;t even think I could really apply them. However just understanding what could be done to improve our communication is very good first step and just for this I recommend to read about this Non Violent Communication, it can surely greatly improve our life.\nSome links:\n https://en.wikipedia.org/wiki/Nonviolent_Communication http://www.nonviolentcommunication.com/aboutnvc/4partprocess.htm http://becomingeden.com/summary-of-nonviolent-communication/ http://www.cnvc.org/sites/cnvc.org/files/NVCInstructionGuide_Jiva_.pdf  ","permalink":"https://ygrenzinger.github.io/posts/non-violent-communication-summary/","summary":"\u0026ldquo;Words are windows\u0026rdquo; is an introduction to non violent communication (abbreviated as NVC). Marshall Rosenberg presents in this book the process that allows us to communicate more serenely with others as well as with ourselves. This mode of communication allows us to become more and more caring, authentic, and empathic with others. It can therefore be used in all interactions of everyday life: as a couple, with our children, at work \u0026hellip; NVC is proving to be a very effective way to manage conflicts, and also to better identify our own needs.","title":"Summary of 'Words are windows, Introduction to nonviolent communication' by Marshall Rosenberg"},{"content":"Most of this public activity is in French 🙂\nTalks  A long (3h) Devoxx university with my colleague Maxime Gelle around test from Unit Test to Testing (in) Production but also BDD, Contract Testing, Property Based testing \u0026hellip; Tour d\u0026rsquo;horizon des tests dans nos applications - Devoxx France - 2021 How to use DDD to fight back functional debt (aka the domain is lost into the legacy implementation) Guerilla DDD - DDD Meetup - 2018 What you need to know before moving from monoolith to Microservices Du monolithe aux micro services depuis les tranchées - Codeurs en Seine - 2017 Making developers aware of psychology and cognitive science thanks to the thesis of two-speed thinking, cognitive biases and their impact on our ability to judge. Coding, fast \u0026amp; slow - Devoxx France - 2016 Discover why and how to facilitate and simplify learning to survive in the 21st century. Apprendre à apprendre pour innover, s\u0026rsquo;adapter et surtout survivre au 21ème siècle How to use BDD to take back control of legacy code and business domain Faire vivre vos spécifications - Scrum Days - 2014 A quickie about Gamification La gamification - HumanTalk - Juin 2014 A quickie about Massive Open Online Course La révolution des MOOCs - HumanTalk - Janvier 2014  Podcast  Devops vu par les devs chez Electro Monkeys LCC 235 - Interview Micro Services  ","permalink":"https://ygrenzinger.github.io/conferences/","summary":"Most of this public activity is in French 🙂\nTalks  A long (3h) Devoxx university with my colleague Maxime Gelle around test from Unit Test to Testing (in) Production but also BDD, Contract Testing, Property Based testing \u0026hellip; Tour d\u0026rsquo;horizon des tests dans nos applications - Devoxx France - 2021 How to use DDD to fight back functional debt (aka the domain is lost into the legacy implementation) Guerilla DDD - DDD Meetup - 2018 What you need to know before moving from monoolith to Microservices Du monolithe aux micro services depuis les tranchées - Codeurs en Seine - 2017 Making developers aware of psychology and cognitive science thanks to the thesis of two-speed thinking, cognitive biases and their impact on our ability to judge.","title":"Conferences"}]